{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","autoFocus","Weather","show","city","country","temperature","Math","round","description","icon","src","alt","pressure","humidity","error","alert","App","state","undefined","e","a","preventDefault","cityName","target","elements","value","fetch","api_call","json","data","setState","sys","main","temp","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAQeA,G,MANA,kBACd,yBAAKC,UAAU,SACd,mDCSaC,EAXF,SAAAC,GAAK,OACjB,0BAAMC,SAAWD,EAAME,YACtB,6BACC,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,uBAAuBP,UAAU,eAAeQ,WAAS,KAEzG,6BACC,4BAAQR,UAAU,cAAlB,kBC+CYS,EArDC,SAAAP,GACf,OAAIA,EAAMQ,KAER,yBAAKV,UAAU,gBAEbE,EAAMS,MAAQT,EAAMU,SACpB,yBAAKZ,UAAU,gBACZE,EAAMS,KADT,KACmBT,EAAMU,SAIzBV,EAAMW,aACN,yBAAKb,UAAU,gBACZc,KAAKC,MAAMb,EAAMW,aADpB,SAKAX,EAAMc,aACN,yBAAKhB,UAAU,uBACZE,EAAMc,aAGTd,EAAMe,MACN,yBAAKjB,UAAU,uBACd,yBAAKkB,IAAMhB,EAAMe,KAAOE,IAAI,GAAGnB,UAAU,kBAI1CE,EAAMkB,UACN,yBAAKpB,UAAU,oBAAf,aACaE,EAAMkB,SADnB,QAKAlB,EAAMmB,UACN,yBAAKrB,UAAU,oBAAf,aACaE,EAAMmB,SADnB,OAQF,6BAEEnB,EAAMoB,OACNC,MAAMrB,EAAMoB,SC2BFE,E,4MAnEdC,MAAQ,CACPd,UAAMe,EACNd,aAASc,EACTb,iBAAaa,EACbV,iBAAaU,EACbT,UAAMS,EACNN,cAAUM,EACVL,cAAUK,EACVJ,WAAOI,EACPhB,MAAM,G,EAGPN,W,uCAAa,WAAOuB,GAAP,mBAAAC,EAAA,6DACZD,EAAEE,iBACIC,EAAWH,EAAEI,OAAOC,SAASF,SAASG,MAC5B,mCAHJ,kBAMYC,MAAM,qDAAD,OAAsDJ,EAAtD,kBAHb,mCAGa,kBANjB,cAMLK,EANK,gBAOQA,EAASC,OAPjB,OAOLC,EAPK,OAQX,EAAKC,SAAS,CACb3B,KAAM0B,EAAK/B,KACXM,QAASyB,EAAKE,IAAI3B,QAClBC,YAAawB,EAAKG,KAAKC,KACvBzB,YAAaqB,EAAKK,QAAQ,GAAGF,KAC7BvB,KAAK,oCAAD,OAAsCoB,EAAKK,QAAQ,GAAGzB,KAAtD,QACJG,SAAUiB,EAAKG,KAAKpB,SACpBC,SAAUgB,EAAKG,KAAKnB,SACpBC,MAAO,GACPZ,MAAM,IAjBI,kDAoBV,EAAK4B,SAAS,CACb3B,UAAMe,EACNd,aAASc,EACTb,iBAAaa,EACbV,iBAAaU,EACbT,UAAMS,EACNN,cAAUM,EACVL,cAAUK,EACVJ,MAAO,iCACPZ,MAAM,IA7BG,0D,6GAmCZ,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMN,WAAYuC,KAAKvC,aACvB,kBAAC,EAAD,CACCO,KAAMgC,KAAKlB,MAAMd,KACjBC,QAAS+B,KAAKlB,MAAMb,QACpBC,YAAa8B,KAAKlB,MAAMZ,YACxBG,YAAa2B,KAAKlB,MAAMT,YACxBC,KAAM0B,KAAKlB,MAAMR,KACjBG,SAAUuB,KAAKlB,MAAML,SACrBC,SAAUsB,KAAKlB,MAAMJ,SACrBC,MAAOqB,KAAKlB,MAAMH,MAClBZ,KAAMiC,KAAKlB,MAAMf,Y,GA7DJkC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8f1a346.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => (\n\t<div className=\"title\">\n\t\t<p>React Weather App</p>\n\t</div>\n);\n\nexport default Titles;","import React from 'react';\n\nconst Form = props => (\n\t<form onSubmit={ props.getWeather }>\n\t\t<div>\n\t\t\t<input type=\"text\" name=\"cityName\" placeholder=\"Enter a city name...\" className=\"search-input\" autoFocus/>\n\t\t</div>\n\t\t<div>\n\t\t\t<button className=\"search-btn\">Get Weather</button>\n\t\t</div>\n\t</form>\n);\n\nexport default Form;","import React from 'react';\n\nconst Weather = props => {\n\tif (props.show) {\n\t\treturn (\n\t\t\t<div className=\"weather-main\">\n\t\t\t\t{\n\t\t\t\t\tprops.city && props.country && \n\t\t\t\t\t<div className=\"weather-city\">\n\t\t\t\t\t\t{ props.city }, { props.country }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tprops.temperature &&\n\t\t\t\t\t<div className=\"weather-temp\">\n\t\t\t\t\t\t{ Math.round(props.temperature) }ÂºC\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tprops.description &&\n\t\t\t\t\t<div className=\"weather-description\">\n\t\t\t\t\t\t{ props.description }\n\t\t\t\t\t</div>}\n\t\t\t\t{\n\t\t\t\t\tprops.icon &&\n\t\t\t\t\t<div className=\"weather-icon-holder\">\n\t\t\t\t\t\t<img src={ props.icon } alt=\"\" className=\"weather-icon\"/>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tprops.pressure && \n\t\t\t\t\t<div className=\"weather-pressure\">\n\t\t\t\t\t\tPressure: { props.pressure } hPa\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tprops.humidity &&\n\t\t\t\t\t<div className=\"weather-humidity\">\n\t\t\t\t\t\tHumidity: { props.humidity } %\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{\n\t\t\t\t\tprops.error &&\n\t\t\t\t\talert(props.error)\n\t\t\t\t}\n\t\t\t</div> \n\t\t)\n\t}\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n\nclass App extends React.Component {\n\tstate = {\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\ttemperature: undefined,\n\t\tdescription: undefined,\n\t\ticon: undefined,\n\t\tpressure: undefined,\n\t\thumidity: undefined,\n\t\terror: undefined,\n\t\tshow: false\n\t}\n\t\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst cityName = e.target.elements.cityName.value;\n\t\tconst API_KEY = \"eae61422270d89bd7c448c2fed80ff59\";\n\t\t\n\t\ttry {\n\t\t\tconst api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric`);\n\t\t\tconst data = await api_call.json();\n\t\t\tthis.setState({\n\t\t\t\tcity: data.name,\n\t\t\t\tcountry: data.sys.country,\n\t\t\t\ttemperature: data.main.temp,\n\t\t\t\tdescription: data.weather[0].main,\n\t\t\t\ticon: `https://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n\t\t\t\tpressure: data.main.pressure,\n\t\t\t\thumidity: data.main.humidity,\n\t\t\t\terror: \"\",\n\t\t\t\tshow: true\n\t\t\t});\n\t\t} catch(err) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcity: undefined,\n\t\t\t\t\tcountry: undefined,\n\t\t\t\t\ttemperature: undefined,\n\t\t\t\t\tdescription: undefined,\n\t\t\t\t\ticon: undefined,\n\t\t\t\t\tpressure: undefined,\n\t\t\t\t\thumidity: undefined,\n\t\t\t\t\terror: \"Please enter a valid city name\",\n\t\t\t\t\tshow: false\n\t\t\t\t});\n\t\t\t}\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Titles />\n\t\t\t\t<Form getWeather={this.getWeather}/>\n\t\t\t\t<Weather \n\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\ttemperature={this.state.temperature}\n\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\ticon={this.state.icon}\n\t\t\t\t\tpressure={this.state.pressure}\n\t\t\t\t\thumidity={this.state.humidity}\n\t\t\t\t\terror={this.state.error}\n\t\t\t\t\tshow={this.state.show}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}